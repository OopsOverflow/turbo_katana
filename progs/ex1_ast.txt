{ Ast.decls =
  [{ Ast.name = "Point";
     ctorParams =
     [{ Ast.name = "x"; className = "Integer" };
       { Ast.name = "y"; className = "Integer" };
       { Ast.name = "name"; className = "String" }];
     body =
     { Ast.ctor =
       { Ast.name = "Point";
         params =
         [{ Ast.name = "x"; className = "Integer" };
           { Ast.name = "y"; className = "Integer" };
           { Ast.name = "name"; className = "String" }];
         superCall = None;
         body =
         (Ast.Block ([],
            [(Ast.Assign ((Ast.Attr ((Ast.Id "this"), "index")),
                (Ast.StaticCall ("Point", "incr", []))));
              (Ast.Assign ((Ast.Attr ((Ast.Id "this"), "hasClone")),
                 (Ast.Cste 0)))
              ]
            ))
         };
       methods =
       [{ Ast.name = "egal"; static = false; override = false;
          params = [{ Ast.name = "p"; className = "Point" }];
          retType = (Some "Integer");
          body =
          (Ast.Block (
             [{ Ast.name = "b1"; className = "Integer" };
               { Ast.name = "b2"; className = "Integer" }],
             [(Ast.Assign ((Ast.Id "b1"),
                 (Ast.BinOp ((Ast.Attr ((Ast.Id "p"), "x")), Ast.Sub,
                    (Ast.Attr ((Ast.Id "this"), "x"))))
                 ));
               (Ast.Assign ((Ast.Id "b2"),
                  (Ast.BinOp ((Ast.Attr ((Ast.Id "p"), "y")), Ast.Sub,
                     (Ast.Attr ((Ast.Id "this"), "y"))))
                  ));
               (Ast.Assign ((Ast.Id "result"), (Ast.Cste 0)));
               (Ast.Ite ((Ast.Id "b1"), (Ast.Block ([], [])),
                  (Ast.Block ([],
                     [(Ast.Assign ((Ast.Id "result"),
                         (Ast.BinOp ((Ast.Id "b2"), Ast.Eq, (Ast.Cste 0)))))
                       ]
                     ))
                  ))
               ]
             ))
          };
         { Ast.name = "allClones"; static = false; override = false;
           params = []; retType = None;
           body =
           (Ast.Block ([],
              [(Ast.Ite (
                  (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "hasClone")),
                     Ast.Neq, (Ast.Cste 0))),
                  (Ast.Block ([],
                     [(Ast.Expr
                         (Ast.Call ((Ast.Attr ((Ast.Id "this"), "clone")),
                            "print", [(Ast.Cste 1)])));
                       (Ast.Expr
                          (Ast.Call ((Ast.Attr ((Ast.Id "this"), "clone")),
                             "allClones", [])))
                       ]
                     )),
                  (Ast.Block ([], []))))
                ]
              ))
           };
         { Ast.name = "clone"; static = false; override = false; params = [];
           retType = (Some "Point");
           body =
           (Ast.Block ([],
              [(Ast.Expr
                  (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "hasClone")),
                     Ast.Eq, (Ast.Cste 1))));
                (Ast.Assign ((Ast.Attr ((Ast.Id "this"), "clone")),
                   (Ast.New ("Point",
                      [(Ast.Attr ((Ast.Id "this"), "x"));
                        (Ast.Attr ((Ast.Id "this"), "y"));
                        (Ast.StrCat ((Ast.Attr ((Ast.Id "this"), "name")),
                           (Ast.String "'")))
                        ]
                      ))
                   ));
                (Ast.Assign ((Ast.Id "result"),
                   (Ast.Attr ((Ast.Id "this"), "clone"))))
                ]
              ))
           };
         { Ast.name = "print"; static = false; override = false;
           params = [{ Ast.name = "verbose"; className = "Integer" }];
           retType = None;
           body =
           (Ast.Block ([],
              [(Ast.Ite ((Ast.Id "verbose"),
                  (Ast.Expr
                     (Ast.Call ((Ast.String "Inside Point::print"),
                        "println", []))),
                  (Ast.Block ([], []))));
                (Ast.Expr
                   (Ast.Call ((Ast.Attr ((Ast.Id "this"), "name")), "print",
                      [])));
                (Ast.Expr
                   (Ast.Call (
                      (Ast.StrCat (
                         (Ast.StrCat (
                            (Ast.StrCat (
                               (Ast.StrCat ((Ast.String "= ("),
                                  (Ast.Call (
                                     (Ast.Attr ((Ast.Id "this"), "x")),
                                     "toString", []))
                                  )),
                               (Ast.String ", "))),
                            (Ast.Call ((Ast.Attr ((Ast.Id "this"), "y")),
                               "toString", []))
                            )),
                         (Ast.String ")"))),
                      "println", [])))
                ]
              ))
           };
         { Ast.name = "move"; static = false; override = false;
           params =
           [{ Ast.name = "dx"; className = "Integer" };
             { Ast.name = "dy"; className = "Integer" };
             { Ast.name = "verbose"; className = "Integer" }];
           retType = (Some "Point");
           body =
           (Ast.Block ([],
              [(Ast.Assign ((Ast.Attr ((Ast.Id "this"), "x")),
                  (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "x")), Ast.Add,
                     (Ast.Id "dx")))
                  ));
                (Ast.Assign ((Ast.Attr ((Ast.Id "this"), "y")),
                   (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "y")), Ast.Add,
                      (Ast.Id "dy")))
                   ));
                (Ast.Ite ((Ast.Id "verbose"),
                   (Ast.Block ([],
                      [(Ast.Expr
                          (Ast.Call ((Ast.Id "this"), "print",
                             [(Ast.Id "verbose")])))
                        ]
                      )),
                   (Ast.Block ([], []))));
                (Ast.Assign ((Ast.Id "result"), (Ast.Id "this")))]
              ))
           };
         { Ast.name = "isCloned"; static = false; override = false;
           params = []; retType = (Some "Integer");
           body =
           (Ast.Return
              (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "hasClone")), Ast.Neq,
                 (Ast.Cste 0))))
           };
         { Ast.name = "setName"; static = false; override = false;
           params = [{ Ast.name = "s"; className = "String" }];
           retType = None;
           body =
           (Ast.Block ([],
              [(Ast.Assign ((Ast.Attr ((Ast.Id "this"), "name")),
                  (Ast.Id "s")))
                ]
              ))
           };
         { Ast.name = "gety"; static = false; override = false; params = [];
           retType = (Some "Integer");
           body = (Ast.Return (Ast.Attr ((Ast.Id "this"), "y"))) };
         { Ast.name = "getx"; static = false; override = false; params = [];
           retType = (Some "Integer");
           body = (Ast.Return (Ast.Attr ((Ast.Id "this"), "x"))) };
         { Ast.name = "init"; static = true; override = false; params = [];
           retType = None;
           body =
           (Ast.Block ([],
              [(Ast.Assign ((Ast.StaticAttr ("Point", "next")), (Ast.Cste 0)
                  ))
                ]
              ))
           };
         { Ast.name = "howMany"; static = true; override = false;
           params = []; retType = (Some "Integer");
           body = (Ast.Return (Ast.StaticAttr ("Point", "next"))) };
         { Ast.name = "incr"; static = true; override = false; params = [];
           retType = (Some "Integer");
           body =
           (Ast.Block ([],
              [(Ast.Assign ((Ast.StaticAttr ("Point", "next")),
                  (Ast.BinOp ((Ast.StaticAttr ("Point", "next")), Ast.Add,
                     (Ast.Cste 1)))
                  ));
                (Ast.Assign ((Ast.Id "result"),
                   (Ast.StaticAttr ("Point", "next"))))
                ]
              ))
           }
         ];
       staticAttrs = [{ Ast.name = "next"; className = "Integer" }];
       instAttrs =
       [{ Ast.name = "clone"; className = "Point" };
         { Ast.name = "index"; className = "Integer" };
         { Ast.name = "hasClone"; className = "Integer" }]
       };
     superclass = None };
    { Ast.name = "Couleur";
      ctorParams = [{ Ast.name = "coul"; className = "Integer" }];
      body =
      { Ast.ctor =
        { Ast.name = "Couleur";
          params = [{ Ast.name = "coul"; className = "Integer" }];
          superCall = None;
          body =
          (Ast.Block ([],
             [(Ast.Ite (
                 (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "coul")), Ast.Lt,
                    (Ast.Cste 0))),
                 (Ast.Assign ((Ast.Attr ((Ast.Id "this"), "coul")),
                    (Ast.Cste 0))),
                 (Ast.Ite (
                    (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "coul")), Ast.Gt,
                       (Ast.Cste 2))),
                    (Ast.Assign ((Ast.Attr ((Ast.Id "this"), "coul")),
                       (Ast.Cste 0))),
                    (Ast.Block ([], []))))
                 ))
               ]
             ))
          };
        methods =
        [{ Ast.name = "estGris"; static = false; override = false;
           params = []; retType = (Some "Integer");
           body =
           (Ast.Block ([],
              [(Ast.Expr
                  (Ast.Call ((Ast.String "Inside Couleur::estGris"),
                     "println", [])));
                (Ast.Assign ((Ast.Id "result"),
                   (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "coul")), Ast.Eq,
                      (Ast.Cste 2)))
                   ))
                ]
              ))
           };
          { Ast.name = "name"; static = false; override = false;
            params = [{ Ast.name = "verbose"; className = "Integer" }];
            retType = (Some "String");
            body =
            (Ast.Block ([{ Ast.name = "aux"; className = "String" }],
               [(Ast.Ite ((Ast.Id "verbose"),
                   (Ast.Expr
                      (Ast.Call ((Ast.String "Inside Couleur::couleur"),
                         "println", []))),
                   (Ast.Block ([], []))));
                 (Ast.Ite (
                    (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "coul")), Ast.Eq,
                       (Ast.Cste 0))),
                    (Ast.Assign ((Ast.Id "result"), (Ast.String "Blanc"))),
                    (Ast.Block (
                       [{ Ast.name = "dummy"; className = "String" }],
                       [(Ast.Assign ((Ast.Id "dummy"), (Ast.String "Noir")));
                         (Ast.Assign ((Ast.Id "aux"), (Ast.String "Gris")));
                         (Ast.Ite (
                            (Ast.BinOp ((Ast.Attr ((Ast.Id "this"), "coul")),
                               Ast.Eq, (Ast.Cste 1))),
                            (Ast.Assign ((Ast.Id "aux"), (Ast.Id "dummy"))),
                            (Ast.Block ([], []))));
                         (Ast.Assign ((Ast.Id "result"), (Ast.Id "aux")))]
                       ))
                    ))
                 ]
               ))
            }
          ];
        staticAttrs = []; instAttrs = [] };
      superclass = None };
    { Ast.name = "CouleurFactory"; ctorParams = [];
      body =
      { Ast.ctor =
        { Ast.name = "CouleurFactory"; params = []; superCall = None;
          body = (Ast.Block ([], [])) };
        methods =
        [{ Ast.name = "gris"; static = false; override = false; params = [];
           retType = (Some "Couleur");
           body = (Ast.Return (Ast.StaticAttr ("CouleurFactory", "theGris")))
           };
          { Ast.name = "noir"; static = false; override = false; params = [];
            retType = (Some "Couleur");
            body =
            (Ast.Return (Ast.StaticAttr ("CouleurFactory", "theNoir"))) };
          { Ast.name = "blanc"; static = false; override = false;
            params = []; retType = (Some "Couleur");
            body =
            (Ast.Return (Ast.StaticAttr ("CouleurFactory", "theBlanc"))) };
          { Ast.name = "init"; static = true; override = false; params = [];
            retType = None;
            body =
            (Ast.Block ([],
               [(Ast.Assign ((Ast.StaticAttr ("CouleurFactory", "theBlanc")),
                   (Ast.New ("Couleur", [(Ast.Cste 0)]))));
                 (Ast.Assign ((Ast.StaticAttr ("CouleurFactory", "theNoir")),
                    (Ast.New ("Couleur", [(Ast.Cste 1)]))));
                 (Ast.Assign ((Ast.StaticAttr ("CouleurFactory", "theGris")),
                    (Ast.New ("Couleur", [(Ast.Cste 2)]))))
                 ]
               ))
            }
          ];
        staticAttrs =
        [{ Ast.name = "theBlanc"; className = "Couleur" };
          { Ast.name = "theNoir"; className = "Couleur" };
          { Ast.name = "theGris"; className = "Couleur" }];
        instAttrs = [] };
      superclass = None };
    { Ast.name = "PointColore";
      ctorParams =
      [{ Ast.name = "x"; className = "Integer" };
        { Ast.name = "y"; className = "Integer" };
        { Ast.name = "coul"; className = "Couleur" }];
      body =
      { Ast.ctor =
        { Ast.name = "PointColore";
          params =
          [{ Ast.name = "x"; className = "Integer" };
            { Ast.name = "y"; className = "Integer" };
            { Ast.name = "coul"; className = "Couleur" }];
          superCall =
          (Some ("Point",
                 [(Ast.Id "x"); (Ast.Id "y");
                   (Ast.StrCat ((Ast.String "P-"),
                      (Ast.Call ((Ast.StaticCall ("Point", "howMany", [])),
                         "toString", []))
                      ))
                   ]));
          body = (Ast.Block ([], [])) };
        methods =
        [{ Ast.name = "print"; static = false; override = true;
           params = [{ Ast.name = "verbose"; className = "Integer" }];
           retType = None;
           body =
           (Ast.Block ([],
              [(Ast.Ite ((Ast.Id "verbose"),
                  (Ast.Expr
                     (Ast.Call ((Ast.String "Inside PointColore::print"),
                        "println", []))),
                  (Ast.Block ([], []))));
                (Ast.Expr
                   (Ast.Call ((Ast.Id "super"), "print", [(Ast.Id "verbose")]
                      )));
                (Ast.Expr
                   (Ast.Call (
                      (Ast.Call ((Ast.Call ((Ast.Id "this"), "couleur", [])),
                         "name", [(Ast.Cste 1)])),
                      "println", [])))
                ]
              ))
           };
          { Ast.name = "estGris"; static = false; override = false;
            params = []; retType = (Some "Integer");
            body =
            (Ast.Return
               (Ast.Call ((Ast.Attr ((Ast.Id "this"), "coul")), "estGris", 
                  [])))
            };
          { Ast.name = "clone"; static = false; override = true; params = [];
            retType = (Some "Point");
            body =
            (Ast.Return
               (Ast.New ("PointColore",
                  [(Ast.Attr ((Ast.Id "this"), "x"));
                    (Ast.Attr ((Ast.Id "this"), "y"));
                    (Ast.Attr ((Ast.Id "this"), "coul"))]
                  )))
            };
          { Ast.name = "colore"; static = false; override = false;
            params = []; retType = (Some "Integer");
            body =
            (Ast.Return
               (Ast.BinOp (
                  (Ast.Call ((Ast.Attr ((Ast.Id "this"), "coul")), "estGris",
                     [])),
                  Ast.Neq, (Ast.Cste 0))))
            };
          { Ast.name = "couleur"; static = false; override = false;
            params = []; retType = (Some "Couleur");
            body = (Ast.Return (Ast.Attr ((Ast.Id "this"), "coul"))) }
          ];
        staticAttrs = []; instAttrs = [] };
      superclass = (Some "Point") };
    { Ast.name = "PointNoir";
      ctorParams =
      [{ Ast.name = "xc"; className = "Integer" };
        { Ast.name = "yc"; className = "Integer" }];
      body =
      { Ast.ctor =
        { Ast.name = "PointNoir";
          params =
          [{ Ast.name = "xc"; className = "Integer" };
            { Ast.name = "yc"; className = "Integer" }];
          superCall =
          (Some ("PointColore",
                 [(Ast.Id "xc"); (Ast.Id "yc");
                   (Ast.StaticCall ("CouleurFactory", "noir", []))]));
          body = (Ast.Block ([], [])) };
        methods =
        [{ Ast.name = "couleur"; static = false; override = true;
           params = []; retType = (Some "Couleur");
           body =
           (Ast.Return (Ast.StaticCall ("CouleurFactory", "noir", []))) };
          { Ast.name = "colore"; static = false; override = true;
            params = []; retType = (Some "Integer");
            body = (Ast.Return (Ast.Cste 1)) };
          { Ast.name = "estGris"; static = false; override = true;
            params = []; retType = (Some "Integer");
            body = (Ast.Return (Ast.Cste 0)) }
          ];
        staticAttrs = []; instAttrs = [] };
      superclass = (Some "PointColore") };
    { Ast.name = "DefaultPoint"; ctorParams = [];
      body =
      { Ast.ctor =
        { Ast.name = "DefaultPoint"; params = [];
          superCall =
          (Some ("PointColore",
                 [(Ast.Cste 0); (Ast.Cste 0);
                   (Ast.StaticCall ("CouleurFactory", "blanc", []))]));
          body = (Ast.Block ([], [])) };
        methods =
        [{ Ast.name = "couleur"; static = false; override = true;
           params = []; retType = (Some "Couleur");
           body =
           (Ast.Return (Ast.StaticCall ("CouleurFactory", "blanc", []))) };
          { Ast.name = "estGris"; static = false; override = true;
            params = []; retType = (Some "Integer");
            body = (Ast.Return (Ast.Cste 0)) }
          ];
        staticAttrs = []; instAttrs = [] };
      superclass = (Some "PointColore") };
    { Ast.name = "Test"; ctorParams = [];
      body =
      { Ast.ctor =
        { Ast.name = "Test"; params = []; superCall = None;
          body = (Ast.Block ([], [])) };
        methods =
        [{ Ast.name = "test2"; static = true; override = false;
           params = [{ Ast.name = "p"; className = "PointColore" }];
           retType = None;
           body =
           (Ast.Block ([],
              [(Ast.Expr
                  (Ast.Call (
                     (Ast.Call ((Ast.Call ((Ast.Id "p"), "couleur", [])),
                        "name", [(Ast.Cste 1)])),
                     "print", [])))
                ]
              ))
           };
          { Ast.name = "test"; static = true; override = false;
            params =
            [{ Ast.name = "p"; className = "Point" };
              { Ast.name = "p2"; className = "PointColore" };
              { Ast.name = "p3"; className = "PointNoir" }];
            retType = None;
            body =
            (Ast.Block (
               [{ Ast.name = "c"; className = "String" };
                 { Ast.name = "c2"; className = "String" };
                 { Ast.name = "c3"; className = "String" };
                 { Ast.name = "true"; className = "Integer" }],
               [(Ast.Assign ((Ast.Id "true"), (Ast.Cste 1)));
                 (Ast.Expr
                    (Ast.Call ((Ast.Id "p"), "print", [(Ast.Id "true")])));
                 (Ast.Expr
                    (Ast.Call ((Ast.Id "p2"), "print", [(Ast.Id "true")])));
                 (Ast.Expr
                    (Ast.Call ((Ast.String "Appel 1: "), "println", [])));
                 (Ast.Ite (
                    (Ast.BinOp ((Ast.Call ((Ast.Id "p2"), "colore", [])),
                       Ast.Neq, (Ast.Cste 0))),
                    (Ast.Assign ((Ast.Id "c"), (Ast.String "colore"))),
                    (Ast.Assign ((Ast.Id "c"), (Ast.String "gris")))));
                 (Ast.Expr
                    (Ast.Call ((Ast.String "Appel 2: "), "println", [])));
                 (Ast.Ite (
                    (Ast.BinOp ((Ast.Call ((Ast.Id "p3"), "colore", [])),
                       Ast.Neq, (Ast.Cste 0))),
                    (Ast.Assign ((Ast.Id "c2"), (Ast.String "colore"))),
                    (Ast.Assign ((Ast.Id "c2"), (Ast.String "gris")))));
                 (Ast.Expr
                    (Ast.Call ((Ast.String "Appel 3: "), "println", [])));
                 (Ast.Ite (
                    (Ast.BinOp ((Ast.Call ((Ast.Id "p3"), "colore", [])),
                       Ast.Neq, (Ast.Cste 0))),
                    (Ast.Assign ((Ast.Id "c3"), (Ast.String "colore"))),
                    (Ast.Assign ((Ast.Id "c3"), (Ast.String "gris")))));
                 (Ast.Expr
                    (Ast.Call ((Ast.String "Resultats de test: "), "println",
                       [])));
                 (Ast.Expr (Ast.Call ((Ast.Id "c"), "print", [])));
                 (Ast.Expr (Ast.Call ((Ast.String " "), "print", [])));
                 (Ast.Expr (Ast.Call ((Ast.Id "c2"), "print", [])));
                 (Ast.Expr (Ast.Call ((Ast.String " "), "print", [])));
                 (Ast.Expr (Ast.Call ((Ast.Id "c3"), "print", [])));
                 (Ast.Expr (Ast.Call ((Ast.String ""), "println", [])))]
               ))
            }
          ];
        staticAttrs = []; instAttrs = [] };
      superclass = None }
    ];
  instr =
  (Ast.Block (
     [{ Ast.name = "p1"; className = "Point" };
       { Ast.name = "p2"; className = "Point" };
       { Ast.name = "p3"; className = "Point" };
       { Ast.name = "clone1"; className = "Point" };
       { Ast.name = "clone2"; className = "Point" };
       { Ast.name = "true"; className = "Integer" };
       { Ast.name = "false"; className = "Integer" };
       { Ast.name = "fv"; className = "Integer" };
       { Ast.name = "o"; className = "PointColore" };
       { Ast.name = "pn"; className = "PointNoir" };
       { Ast.name = "dp"; className = "DefaultPoint" }],
     [(Ast.Expr (Ast.Call ((Ast.String "Debut du programme"), "println", [])));
       (Ast.Expr (Ast.StaticCall ("Point", "init", [])));
       (Ast.Expr (Ast.StaticCall ("CouleurFactory", "init", [])));
       (Ast.Assign ((Ast.Id "true"), (Ast.Cste 1)));
       (Ast.Assign ((Ast.Id "false"), (Ast.Cste 0)));
       (Ast.Assign ((Ast.Id "p1"),
          (Ast.New ("Point", [(Ast.Cste 1); (Ast.Cste 5); (Ast.String "p1")]
             ))
          ));
       (Ast.Assign ((Ast.Id "p2"),
          (Ast.New ("Point", [(Ast.Cste 2); (Ast.Cste 3); (Ast.String "p2")]
             ))
          ));
       (Ast.Assign ((Ast.Id "p3"),
          (Ast.New ("Point", [(Ast.Cste 0); (Ast.Cste 0); (Ast.String "p3")]
             ))
          ));
       (Ast.Assign ((Ast.Id "fv"), (Ast.Cste 12)));
       (Ast.Assign ((Ast.Id "o"),
          (Ast.New ("PointColore",
             [(Ast.Cste 0); (Ast.Cste 0);
               (Ast.StaticCall ("CouleurFactory", "blanc", []))]
             ))
          ));
       (Ast.Assign ((Ast.Id "pn"),
          (Ast.New ("PointNoir", [(Ast.Cste 1); (Ast.UMinus (Ast.Cste 1))]))
          ));
       (Ast.Assign ((Ast.Id "dp"), (Ast.New ("DefaultPoint", []))));
       (Ast.Expr (Ast.Call ((Ast.Id "p1"), "print", [(Ast.Cste 0)])));
       (Ast.Expr (Ast.Call ((Ast.Id "p2"), "print", [(Ast.Cste 0)])));
       (Ast.Expr
          (Ast.Call ((Ast.Id "p2"), "move",
             [(Ast.Call ((Ast.Id "p1"), "getx", []));
               (Ast.Call ((Ast.Id "p1"), "gety", [])); (Ast.Cste 0)]
             )));
       (Ast.Expr (Ast.Call ((Ast.Id "p2"), "print", [(Ast.Cste 0)])));
       (Ast.Expr (Ast.Call ((Ast.Id "o"), "print", [(Ast.Cste 0)])));
       (Ast.Expr
          (Ast.Call ((Ast.Id "o"), "setName", [(Ast.String "origine")])));
       (Ast.Expr (Ast.Call ((Ast.Id "o"), "print", [(Ast.Id "true")])));
       (Ast.Expr
          (Ast.Call ((Ast.Id "p2"), "move",
             [(Ast.BinOp (
                 (Ast.BinOp ((Ast.Call ((Ast.Id "p1"), "getx", [])), Ast.Sub,
                    (Ast.BinOp ((Ast.Cste 2), Ast.Mul, (Ast.Cste 5))))),
                 Ast.Sub, (Ast.Cste 3)));
               (Ast.Call ((Ast.Id "p1"), "gety", [])); (Ast.Cste 0)]
             )));
       (Ast.Expr (Ast.Call ((Ast.Id "p2"), "print", [(Ast.Id "true")])));
       (Ast.Expr
          (Ast.Call ((Ast.String "On va essayer le clonage:"), "println", 
             [])));
       (Ast.Assign ((Ast.Id "clone1"),
          (Ast.Call ((Ast.Id "p1"), "clone", []))));
       (Ast.Expr (Ast.Call ((Ast.Id "clone1"), "print", [(Ast.Id "false")])));
       (Ast.Expr (Ast.Call ((Ast.String "p1 isCloned: "), "print", [])));
       (Ast.Ite ((Ast.Call ((Ast.Id "p1"), "isCloned", [])),
          (Ast.Expr (Ast.Call ((Ast.String "OK"), "println", []))),
          (Ast.Expr (Ast.Call ((Ast.String "KO"), "println", [])))));
       (Ast.Assign ((Ast.Id "clone2"),
          (Ast.Call ((Ast.Id "clone1"), "clone", []))));
       (Ast.Expr
          (Ast.Call (
             (Ast.Call ((Ast.Id "clone2"), "move",
                [(Ast.Cste 54); (Ast.Cste 36); (Ast.Cste 0)])),
             "print", [(Ast.Id "false")])));
       (Ast.Expr
          (Ast.Call ((Ast.String "Impression de tous les clones de p1:"),
             "println", [])));
       (Ast.Expr (Ast.Call ((Ast.Id "p1"), "allClones", [])));
       (Ast.Expr
          (Ast.Call ((Ast.String "Fin de l'impression de tous les clones"),
             "println", [])));
       (Ast.Expr
          (Ast.Call ((Ast.String "Valeur du compteur de nombre de points: "),
             "println", [])));
       (Ast.Expr
          (Ast.Call (
             (Ast.Call ((Ast.StaticCall ("Point", "howMany", [])),
                "toString", [])),
             "println", [])));
       (Ast.Assign ((Ast.Id "p1"),
          (Ast.Call ((Ast.Call ((Ast.Id "p1"), "clone", [])), "move",
             [(Ast.Cste 2); (Ast.UMinus (Ast.Cste 3)); (Ast.Cste 0)]))
          ));
       (Ast.Expr (Ast.Call ((Ast.Id "p1"), "print", [(Ast.Id "true")])));
       (Ast.Expr
          (Ast.Call ((Ast.Call ((Ast.Id "o"), "clone", [])), "print",
             [(Ast.Id "true")])));
       (Ast.Expr
          (Ast.Call ((Ast.String "test(Point, PointColore, PointNoir)"),
             "println", [])));
       (Ast.Expr
          (Ast.StaticCall ("Test", "test",
             [(Ast.Id "p1"); (Ast.Id "o"); (Ast.Id "pn")])));
       (Ast.Expr
          (Ast.Call ((Ast.String "test(PointNoir, PointNoir, PointNoir)"),
             "println", [])));
       (Ast.Expr
          (Ast.StaticCall ("Test", "test",
             [(Ast.Id "pn"); (Ast.Id "pn"); (Ast.Id "pn")])));
       (Ast.Assign ((Ast.Id "p1"), (Ast.Id "pn")));
       (Ast.Expr (Ast.StaticCall ("Test", "test2", [(Ast.Id "o")])));
       (Ast.Expr (Ast.StaticCall ("Test", "test2", [(Ast.Id "pn")])));
       (Ast.Assign ((Ast.Id "o"), (Ast.Id "pn")));
       (Ast.Expr
          (Ast.Call ((Ast.String "test(PointNoir, PointNoir, PointNoir)"),
             "println", [])));
       (Ast.Expr
          (Ast.StaticCall ("Test", "test",
             [(Ast.Id "p1"); (Ast.Id "o"); (Ast.Id "pn")])));
       (Ast.Expr (Ast.StaticCall ("Test", "test2", [(Ast.Id "o")])));
       (Ast.Expr (Ast.StaticCall ("Test", "test2", [(Ast.Id "pn")])));
       (Ast.Expr (Ast.Call ((Ast.String "\nDone"), "println", [])))]
     ))
  }
